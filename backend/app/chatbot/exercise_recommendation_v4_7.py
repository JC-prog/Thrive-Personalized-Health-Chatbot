# -*- coding: utf-8 -*-
"""Copy of Exercise recommendation v4.7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jJqbGZMAMpvZI9dytJegWJfwkQd43Y9S

The functions of exercise recommendation:

1. User Queries
* Exercise type queries (cardio, strength, flexibility)
* Muscle group targeting (chest, back, legs, etc.)
* Equipment constraints (bodyweight, dumbbells, etc.)
Health condition-specific questions (diabetes, hypertension, cholesterol)

2. Content-Based Filtering for Plan Generation
* Enables finding similar exercises based on vector similarity
* Supports intelligent substitution considering health conditions
* Represents relationships between exercises, muscles, and health benefits

3. Clinical Guideline Integration
* Following condition-specific exercise order, intensity, and frequency
* Providing health-focused rationales for each exercise and session
* Adapting exercises based on specific health conditions
* Including appropriate monitoring guidance and safety notes

Improvement:
Generator as a optimisation problem

# 1. Initial Setup
"""

# Core imports
import pandas as pd
import numpy as np
import re
import json
import time
import random
from typing import List, Dict, Tuple, Optional, Any, Union


# For embeddings and similarity
import torch
from sklearn.neighbors import NearestNeighbors
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.neighbors import NearestNeighbors
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
import os
# Try installing pykeen if not available


# from pykeen.pipeline import pipeline
# from pykeen.triples import TriplesFactory

# print("All imports successful!")

"""# 2. Data Processing and Exploration"""

import pandas as pd
current_dir = os.path.dirname(os.path.abspath(__file__)) 
csv_path = os.path.join(current_dir, 'data', 'combined_exercise_dataset.csv')

combined_exercises_df = pd.read_csv(csv_path)  # update path if needed
# print(combined_exercises_df.columns.tolist())

# combined_exercises_df

"""# 3. User Profile"""

# User Profile Module
# Handles initialization and validation of user profiles

def initialize_user_profile(age=None, gender=None, height=None, weight=None,
                         bp_systolic=None, bp_diastolic=None, glucose=None,
                         cholesterol=None, fitness_level=None, fitness_goal=None,
                         sessions_per_week=None, equipment=None):
    """Initialize or collect user profile with defaults

    Args:
        age: User's age (default: 40)
        gender: User's gender (default: "not specified")
        height: User's height in cm (default: 170.0)
        weight: User's weight in kg (default: 70.0)
        bp_systolic: Systolic blood pressure (default: 120)
        bp_diastolic: Diastolic blood pressure (default: 80)
        glucose: Blood glucose level (default: 100)
        cholesterol: Blood cholesterol level (default: 180)
        fitness_level: User's fitness level (default: "beginner")
        fitness_goal: User's fitness goal (default: "general")
        sessions_per_week: Number of weekly workout sessions (default: 3)
        equipment: Available equipment (default: ["Bodyweight"])

    Returns:
        Dict: Complete user profile with derived metrics
    """
    # Initialize with provided values or defaults
    profile = {
        "demographics": {
            "age": age if age is not None else 40,
            "gender": gender.lower() if gender is not None else "not specified"
        },
        "body_metrics": {
            "height": height if height is not None else 170.0,  # cm
            "weight": weight if weight is not None else 70.0    # kg
        },
        "health_metrics": {
            "bp_systolic": bp_systolic if bp_systolic is not None else 120,
            "bp_diastolic": bp_diastolic if bp_diastolic is not None else 80,
            "glucose": glucose if glucose is not None else 100,
            "cholesterol": cholesterol if cholesterol is not None else 180
        },
        "fitness_info": {
            "fitness_level": fitness_level.lower() if fitness_level is not None else "beginner",
            "fitness_goal": fitness_goal.lower() if fitness_goal is not None else "general",
        },
        "preferences": {
            "sessions_per_week": sessions_per_week if sessions_per_week is not None else 3,
            "equipment": equipment if equipment is not None else ["Bodyweight"]
        }
    }

    # Calculate BMI
    height_m = profile["body_metrics"]["height"] / 100  # convert cm to m
    profile["body_metrics"]["bmi"] = round(profile["body_metrics"]["weight"] / (height_m * height_m), 1)

    # Determine health condition flags
    profile["health_conditions"] = {
        "has_hypertension": (profile["health_metrics"]["bp_systolic"] >= 130 or
                           profile["health_metrics"]["bp_diastolic"] >= 85),
        "has_diabetes": profile["health_metrics"]["glucose"] >= 126,  # Fasting glucose ≥126 mg/dL
        "has_high_cholesterol": profile["health_metrics"]["cholesterol"] >= 200,
        "has_obesity": profile["body_metrics"]["bmi"] >= 30 if profile["body_metrics"]["bmi"] else False
    }

    # Calculate age-related max heart rate
    profile["exercise_parameters"] = {
        "max_heart_rate": 220 - profile["demographics"]["age"] if profile["demographics"]["age"] else 180,
        "target_heart_rate_zone": {}
    }

    # Calculate target heart rate zones
    max_hr = profile["exercise_parameters"]["max_heart_rate"]
    profile["exercise_parameters"]["target_heart_rate_zone"] = {
        "low_intensity": [int(max_hr * 0.5), int(max_hr * 0.6)],
        "moderate_intensity": [int(max_hr * 0.6), int(max_hr * 0.7)],
        "high_intensity": [int(max_hr * 0.7), int(max_hr * 0.85)]
    }

    return profile

def validate_health_profile(user_profile):
    """Validate the health profile and return a simplified version

    Args:
        user_profile: The complete user profile

    Returns:
        Dict: Simplified health profile with condition flags
    """
    # Extract health metrics to create a simplified health profile
    health_profile = {
        "bp_systolic": user_profile['health_metrics']['bp_systolic'],
        "bp_diastolic": user_profile['health_metrics']['bp_diastolic'],
        "glucose": user_profile['health_metrics']['glucose'],
        "cholesterol": user_profile['health_metrics']['cholesterol'],
        "bmi": user_profile['body_metrics']['bmi']
    }

    # Add derived fields based on standard medical criteria
    health_profile['diabetes_status'] = 1 if user_profile['health_conditions']['has_diabetes'] else 0
    health_profile['has_diabetes'] = user_profile['health_conditions']['has_diabetes']
    health_profile['has_hypertension'] = user_profile['health_conditions']['has_hypertension']
    health_profile['has_high_cholesterol'] = user_profile['health_conditions']['has_high_cholesterol']
    health_profile['has_obesity'] = user_profile['health_conditions']['has_obesity']

    # Log the validation results
    health_conditions = []
    if health_profile['has_diabetes']:
        health_conditions.append("diabetes")
    if health_profile['has_hypertension']:
        health_conditions.append("hypertension")
    if health_profile['has_high_cholesterol']:
        health_conditions.append("high cholesterol")
    if health_profile['has_obesity']:
        health_conditions.append("obesity")

    if health_conditions:
        print(f"Health profile validated: {', '.join(health_conditions)} detected")
    else:
        print("Health profile validated: no health conditions detected")

    return health_profile

# Create a sample user profile for testing
SAMPLE_USER_PROFILE = initialize_user_profile(
    age=28,
    gender="female",
    height=165,
    weight=75,
    bp_systolic=135,
    bp_diastolic=88,
    glucose=130,
    cholesterol=210,
    fitness_level="intermediate",
    sessions_per_week=4
)

# Test the profile validation
if __name__ == "__main__":
    validated_health_profile = validate_health_profile(SAMPLE_USER_PROFILE)

    print("\nHealth Conditions:")
    for condition, has_condition in SAMPLE_USER_PROFILE['health_conditions'].items():
        print(f"• {condition}: {has_condition}")

    print("\nHealth metrics:")
    for key, value in validated_health_profile.items():
        if not key.startswith('has_') and key != 'diabetes_status':
            print(f"• {key}: {value}")

    print("\nUser profile:")
    print(f"• Age: {SAMPLE_USER_PROFILE['demographics']['age']}")
    print(f"• Gender: {SAMPLE_USER_PROFILE['demographics']['gender']}")
    print(f"• Height/Weight: {SAMPLE_USER_PROFILE['body_metrics']['height']} cm / {SAMPLE_USER_PROFILE['body_metrics']['weight']} kg")
    print(f"• Fitness level: {SAMPLE_USER_PROFILE['fitness_info']['fitness_level']}")
    print(f"• Sessions per week: {SAMPLE_USER_PROFILE['preferences']['sessions_per_week']}")

"""# Clinical Guidelines Class"""

# Complete Clinical Guidelines Module
class GuidelinesRegistry:
    """
    A registry system for storing, accessing, and applying clinical exercise guidelines.
    Tracks evidence-based recommendations for different health conditions.
    """

    def __init__(self, load_defaults: bool = True):
        """
        Initialize the guidelines registry.

        Parameters:
        -----------
        load_defaults : bool
            Whether to load default guidelines during initialization
        """
        # Core structure for the registry
        self.guidelines = {
            "baseline": {},
            "conditions": {},
            "special_populations": {},
            "interactions": {},
            "progression": {}
        }

        # Load default guidelines if requested
        if load_defaults:
            self._load_default_guidelines()

    def _load_default_guidelines(self) -> None:
        """Load all default guidelines into the registry"""
        self._load_singapore_pa_guidelines()
        self._load_aha_guidelines()
        self._load_exercise_modality_guidelines()
        self._load_condition_specific_guidelines()
        self._load_guideline_interactions()

    def _load_singapore_pa_guidelines(self):
        """Load Singapore Physical Activity Guidelines for 18-64 years old"""
        self.guidelines["baseline"]["singapore_pa"] = {
            "source": "Singapore physical activity guidelines for 18-64 years old",
            "description": "Exercise baseline for everybody",
            "recommendations": {
                "aerobic": {
                    "moderate_intensity": {
                        "min_minutes": 150,
                        "max_minutes": 300,
                        "frequency": "weekly",
                        "description": "Moderate-intensity aerobic physical activity per week"
                    },
                    "vigorous_intensity": {
                        "min_minutes": 75,
                        "max_minutes": 150,
                        "frequency": "weekly",
                        "description": "Vigorous-intensity aerobic physical activity per week"
                    },
                    "intensity_description": {
                        "moderate": "3.0 to 5.9 metabolic equivalents; activity that begins to increase breathing and heart rate, such as brisk walking",
                        "vigorous": "≥6.0 metabolic equivalents; more intense exercise resulting in larger increases in breathing and heart rate, such as jogging or brisk walking uphill"
                    }
                },
                "resistance": {
                    "frequency": {
                        "days_per_week": 2,
                        "description": "At least 2 days per week"
                    },
                    "intensity": "moderate to vigorous",
                    "repetitions": {
                        "min": 8,
                        "max": 12,
                        "description": "8 to 12 repetitions per set to achieve strengthening outcomes"
                    },
                    "focus": "Strengthen muscles, bones, and joints"
                },
                "special_populations": {
                    "over_50": {
                        "multi_component": {
                            "frequency": {
                                "days_per_week": 3,
                                "description": "At least 3 days per week"
                            },
                            "intensity": "moderate or greater",
                            "focus": "Emphasizes strength and functional balance",
                            "description": "For those over 50 years, include multi-component physical activity"
                        }
                    },
                    "chronic_conditions": {
                        "note": "For adults with chronic conditions (e.g. Type-2 Diabetes and Hypertension), the recommendations and tips are still applicable."
                    }
                }
            }
        }

    def _load_aha_guidelines(self):
        """Load American Heart Association Guidelines"""
        self.guidelines["conditions"]["aha"] = {
            "source": "Physical Activity as a Critical Component of First-Line Treatment for Elevated Blood Pressure or Cholesterol [American Heart Association]",
            "description": "Guidelines for using physical activity to treat elevated blood pressure and cholesterol",
            "blood_pressure": {
                "treatment_pathways": {
                    "normal": {
                        "criteria": {
                            "sbp": {"max": 119},
                            "dbp": {"max": 79}
                        },
                        "recommendation": "Maintain healthy lifestyle",
                        "message": "Your blood pressure is normal. The guidelines recommend maintaining a healthy lifestyle."
                    },
                    "elevated": {
                        "criteria": {
                            "sbp": {"min": 120, "max": 129},
                            "dbp": {"max": 79}
                        },
                        "recommendation": "Lifestyle only treatment",
                        "message": "Based on your blood pressure levels, lifestyle modifications are recommended as the primary treatment approach."
                    },
                    "stage1_low_risk": {
                        "criteria": {
                            "condition": "OR",
                            "criteria": [
                                {"sbp": {"min": 130, "max": 139}},
                                {"dbp": {"min": 80, "max": 90}}
                            ],
                            "ascvd_risk": {"max": 10}
                        },
                        "recommendation": "Lifestyle only treatment",
                        "message": "Your cardiovascular risk factors indicate a need for intensive lifestyle intervention per treatment guidelines."
                    },
                    "stage1_high_risk": {
                        "criteria": {
                            "condition": "OR",
                            "criteria": [
                                {"sbp": {"min": 130, "max": 139}},
                                {"dbp": {"min": 80, "max": 90}}
                            ],
                            "ascvd_risk": {"min": 10}
                        },
                        "recommendation": "Pharmacological and lifestyle treatment",
                        "message": "Your blood pressure and cardiovascular risk indicate a need for both medication and lifestyle changes according to treatment guidelines."
                    }
                }
            },
            "cholesterol": {
                "treatment_pathways": {
                    "low_risk": {
                        "criteria": {
                            "ldl_c": {"max": 70}
                        },
                        "recommendation": "Maintain healthy lifestyle",
                        "message": "Your cholesterol levels are in the low-risk range. The guidelines recommend maintaining a healthy lifestyle."
                    },
                    "moderate_risk": {
                        "criteria": {
                            "ldl_c": {"min": 70, "max": 189}
                        },
                        "recommendation": "Lifestyle only treatment (with shared decision making)",
                        "message": "Based on your cholesterol levels, lifestyle modifications are recommended, with potential for medication based on clinical discussion."
                    },
                    "high_risk": {
                        "criteria": {
                            "condition": "OR",
                            "criteria": [
                                {"has_ascvd": True},
                                {"ldl_c": {"min": 190}},
                                {
                                    "condition": "AND",
                                    "criteria": [
                                        {"age": {"min": 40, "max": 75}},
                                        {"ldl_c": {"min": 70}},
                                        {
                                            "condition": "OR",
                                            "criteria": [
                                                {"has_diabetes": True},
                                                {"ascvd_risk": {"min": 20}}
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "recommendation": "Pharmacological and lifestyle treatment",
                        "message": "Your cholesterol levels indicate a need for both medication and lifestyle changes according to treatment guidelines."
                    }
                }
            }
        }

    def _load_exercise_modality_guidelines(self):
        """Load Exercise Modality Effectiveness Guidelines"""
        self.guidelines["baseline"]["modality_effectiveness"] = {
            "source": "Differential Effects of Aerobic Exercise, Resistance Training and Combined Exercise Modalities",
            "description": "Effectiveness ratings for different exercise modalities across health parameters",
            "benefit_scale": {
                "0": "minimal effect",
                "+": "small to moderate benefit",
                "++": "moderate benefit",
                "+++": "moderate to large benefit"
            },
            "parameters": {
                "blood_pressure": {
                    "resistance": "+",
                    "aerobic": "++",
                    "combined": "++"
                },
                "lipid_profile": {
                    "resistance": "+",
                    "aerobic": "++",
                    "combined": "+++"
                },
                "glycemic_control": {
                    "resistance": "++",
                    "aerobic": "++",
                    "combined": "+++"
                },
                "bodyweight_loss": {
                    "resistance": "+",
                    "aerobic": "++",
                    "combined": "+++"
                },
                "bodyweight_maintenance": {
                    "resistance": "+",
                    "aerobic": "+",
                    "combined": "+++"
                },
                "body_composition_lean_mass": {
                    "resistance": "+++",
                    "aerobic": "+",
                    "combined": "+++"
                },
                "fat_mass": {
                    "resistance": "+",
                    "aerobic": "++",
                    "combined": "+++"
                }
            }
        }

    def _load_condition_specific_guidelines(self):
        """Load Condition-Specific Exercise Guidelines"""
        # Cholesterol guidelines
        self.guidelines["conditions"]["cholesterol"] = {
            "source": "Differential Effects of Aerobic Exercise, Resistance Training and Combined Exercise Modalities",
            "description": "Exercise recommendations for cholesterol management",
            "patient_groups": {
                "healthy": {
                    "targets": [
                        "Maintain low LDL cholesterol and triglycerides",
                        "Increase HDL cholesterol"
                    ],
                    "recommendations": {
                        "physical_activity": {
                            "duration": 30,
                            "frequency": 5,
                            "unit": "min/day",
                            "description": "Increase physical activity to >30 min/day 5 times weekly"
                        },
                        "aerobic": {
                            "intensity": "moderate",
                            "intensity_range": {"min": 70, "max": 80},
                            "intensity_unit": "HRreserve",
                            "description": "Prolonged moderate-intensity aerobic exercise at 70–80% HRreserve"
                        },
                        "resistance": {
                            "intensity": "low",
                            "intensity_value": 50,
                            "intensity_unit": "1RM",
                            "description": "Low-intensity resistance training at 50% 1RM"
                        }
                    }
                },
                "elevated_cholesterol": {
                    "targets": [
                        "Reduce LDL cholesterol and triglycerides",
                        "Increase HDL cholesterol"
                    ],
                    "recommendations": {
                        "physical_activity": {
                            "duration": 30,
                            "frequency": 5,
                            "unit": "min/day",
                            "description": "Increase physical activity to >30 min/day 5 times weekly"
                        },
                        "aerobic": {
                            "intensity": "moderate-to-high",
                            "initial_range": {"min": 70, "max": 80},
                            "progression": 85,
                            "initial_unit": "HRreserve",
                            "progression_unit": "HRmax",
                            "description": "Prolonged moderate-intensity aerobic exercise at 70–80% HRreserve, progressing to 85% HRmax"
                        },
                        "resistance": {
                            "intensity": "moderate-to-high",
                            "intensity_range": {"min": 75, "max": 85},
                            "intensity_unit": "1RM",
                            "description": "Moderate to high-intensity resistance training at 75–85% 1RM"
                        }
                    }
                },
                "elevated_cholesterol_limited_mobility": {
                    "targets": [
                        "Reduce LDL cholesterol and triglycerides",
                        "Increase HDL cholesterol"
                    ],
                    "recommendations": {
                        "physical_activity": {
                            "description": "Increase physical activity as much as is feasible"
                        },
                        "resistance": {
                            "intensity": "progressive",
                            "intensity_range": {"min": 50, "max": 75},
                            "intensity_unit": "1RM",
                            "description": "Resistance training progressing from 50 to 75% in major muscle groups"
                        },
                        "circuit": {
                            "intensity": "moderate",
                            "description": "Can be incorporated into circuit sessions and maintained at moderate intensity"
                        }
                    }
                }
            }
        }

        # Diabetes guidelines
        self.guidelines["conditions"]["diabetes"] = {
            "source": "American Diabetes Association",
            "description": "Exercise recommendations for diabetes management",
            "recommendations": {
                "aerobic": {
                    "frequency": {
                        "days_per_week": 3,
                        "max_consecutive_days_rest": 2,
                        "description": "At least 3 days/week with no more than 2 consecutive days without activity"
                    },
                    "intensity": {
                        "moderate": {
                            "duration": 150,
                            "frequency": "weekly",
                            "description": "At least 150 min/week at moderate intensity (50-70% of maximum heart rate)"
                        },
                        "vigorous": {
                            "duration": 75,
                            "frequency": "weekly",
                            "description": "At least 75 min/week of vigorous activity (>70% of maximum heart rate)"
                        }
                    }
                },
                "resistance": {
                    "frequency": {
                        "days_per_week": 2,
                        "description": "At least 2 days/week on non-consecutive days"
                    },
                    "intensity": "moderate to vigorous",
                    "sets": {
                        "range": {"min": 1, "max": 3},
                        "description": "1-3 sets"
                    },
                    "repetitions": {
                        "range": {"min": 8, "max": 15},
                        "description": "8-15 repetitions"
                    },
                    "exercises": {
                        "count": {"min": 5, "max": 10},
                        "description": "5-10 exercises involving major muscle groups"
                    }
                },
                "flexibility_balance": {
                    "frequency": {
                        "days_per_week": 2,
                        "description": "2-3 days/week"
                    },
                    "duration": {
                        "minutes": 5,
                        "description": "Spend at least 5-10 minutes on flexibility exercises"
                    }
                },
                "timing": {
                    "postprandial": {
                        "description": "Exercise 1-3 hours after eating may minimize risk of hypoglycemia",
                        "window": {"min": 1, "max": 3}
                    }
                },
                "monitoring": {
                    "blood_glucose": {
                        "pre_exercise": {
                            "description": "Check blood glucose before exercise",
                            "thresholds": {
                                "low": {
                                    "value": 100,
                                    "unit": "mg/dL",
                                    "action": "Consume carbohydrate before starting exercise"
                                },
                                "high": {
                                    "value": 250,
                                    "unit": "mg/dL",
                                    "action": "Check for ketones; if moderate to high, postpone exercise"
                                }
                            }
                        },
                        "during_extended_exercise": {
                            "description": "For exercises lasting longer than 1 hour, check glucose intermittently"
                        }
                    }
                },
                "special_considerations": {
                    "insulin_users": {
                        "description": "Reduce insulin doses before planned exercise",
                        "injection_sites": "Avoid injecting insulin into working muscles"
                    },
                    "complications": {
                        "neuropathy": "Non-weight bearing activities may be safer",
                        "retinopathy": "Avoid activities that dramatically increase blood pressure"
                    }
                }
            }
        }

        # Hypertension guidelines
        self.guidelines["conditions"]["hypertension"] = {
            "source": "American College of Cardiology/American Heart Association",
            "description": "Exercise recommendations for hypertension management",
            "recommendations": {
                "aerobic": {
                    "frequency": {
                        "days_per_week": 5,
                        "description": "Most days of the week, preferably daily"
                    },
                    "intensity": {
                        "range": {"min": 40, "max": 70},
                        "unit": "VO2 reserve",
                        "description": "Moderate intensity (40-70% VO2 reserve)"
                    },
                    "duration": {
                        "range": {"min": 30, "max": 60},
                        "unit": "minutes per day",
                        "description": "30-60 minutes per day of continuous or accumulated activity"
                    }
                },
                "resistance": {
                    "frequency": {
                        "days_per_week": 2,
                        "description": "2-3 days per week"
                    },
                    "intensity": {
                        "range": {"min": 60, "max": 80},
                        "unit": "1RM",
                        "description": "Moderate intensity (60-80% 1RM)"
                    },
                    "sets": {
                        "count": 1,
                        "description": "1 set"
                    },
                    "repetitions": {
                        "range": {"min": 10, "max": 15},
                        "description": "10-15 repetitions"
                    },
                    "exercises": {
                        "count": {"min": 8, "max": 10},
                        "description": "8-10 exercises targeting major muscle groups"
                    }
                },
                "breathing": {
                    "technique": "Avoid the Valsalva maneuver",
                    "description": "Maintain normal breathing during resistance exercises"
                },
                "exercise_types": {
                    "preferred": [
                        "Walking",
                        "Jogging",
                        "Cycling",
                        "Swimming"
                    ],
                    "caution": [
                        "Very heavy weightlifting",
                        "Sprinting",
                        "Snow shoveling"
                    ]
                },
                "monitoring": {
                    "blood_pressure": {
                        "pre_exercise": {
                            "description": "Exercise should be postponed if resting BP exceeds 200/110 mmHg",
                            "thresholds": {
                                "systolic": 200,
                                "diastolic": 110,
                                "unit": "mmHg",
                                "action": "Postpone exercise until better controlled"
                            }
                        }
                    },
                    "perceived_exertion": {
                        "target": {
                            "range": {"min": 11, "max": 14},
                            "scale": "6-20 Borg Scale",
                            "description": "Moderate intensity corresponds to 11-14 on the 6-20 Borg Scale"
                        }
                    }
                },
                "timing": {
                    "recommendation": "Morning exercise may help control blood pressure throughout the day",
                    "caution": "Blood pressure is typically highest in the morning"
                }
            }
        }

    def _load_guideline_interactions(self):
        """Load Guidelines for Multiple Conditions"""
        self.guidelines["interactions"] = {
            "condition_combinations": {
                "diabetes_hypertension_cholesterol": {
                    "description": "Balanced approach for all three conditions",
                    "exercise_order": ["Cardio", "Resistance", "Flexibility"],
                    "focus": "Balanced approach with cardio first",
                    "note": "This workout is optimized for multiple conditions, balancing their different requirements"
                },
                "hypertension_cholesterol": {
                    "description": "Approach for hypertension and high cholesterol",
                    "exercise_order": ["Cardio", "Resistance", "Flexibility"],
                    "focus": "Emphasis on cardio for both blood pressure and lipid control",
                    "note": "This workout emphasizes cardiovascular exercise for blood pressure and cholesterol management"
                },
                "diabetes": {
                    "description": "Approach for diabetes only",
                    "exercise_order": ["Resistance", "Cardio", "Flexibility"],
                    "focus": "Emphasis on resistance training for glycemic control",
                    "note": "This workout emphasizes resistance training first for optimal blood glucose management"
                }
            },
            "conflicting_guidelines": {
                "intensity": {
                    "resolution": "Use the most conservative (lowest) intensity factor from all conditions",
                    "description": "When multiple conditions specify different intensity levels, use the lowest to ensure safety"
                },
                "exercise_type_priority": {
                    "resolution": "Use condition-specific prioritization order",
                    "description": "Prioritize exercise types based on the primary condition or combination of conditions"
                },
                "duration": {
                    "resolution": "Use the longest recommended duration that doesn't exceed safety thresholds",
                    "description": "When conditions recommend different durations, use the longest that's safe for all conditions"
                }
            }
        }

    def get_applicable_guidelines(self, health_profile):
        """
        Get all guidelines applicable to a given health profile.

        Parameters:
        -----------
        health_profile : Dict[str, Any]
            The health profile to evaluate

        Returns:
        --------
        Dict[str, Any]:
            Dictionary of applicable guidelines
        """
        applicable = {
            "baseline": {},
            "conditions": {},
            "interactions": {}
        }

        # Always include baseline guidelines
        applicable["baseline"] = self.guidelines["baseline"]

        # Include condition-specific guidelines
        has_diabetes = health_profile.get('has_diabetes', False)
        has_hypertension = health_profile.get('has_hypertension', False)
        has_high_cholesterol = health_profile.get('has_high_cholesterol', False)

        if has_diabetes:
            applicable["conditions"]["diabetes"] = self.guidelines["conditions"].get("diabetes", {})

        if has_hypertension:
            applicable["conditions"]["hypertension"] = self.guidelines["conditions"].get("hypertension", {})

        if has_high_cholesterol:
            applicable["conditions"]["cholesterol"] = self.guidelines["conditions"].get("cholesterol", {})

        # Include interaction guidelines if multiple conditions
        condition_count = sum([has_diabetes, has_hypertension, has_high_cholesterol])
        if condition_count > 1:
            applicable["interactions"] = self.guidelines["interactions"]

            # Determine specific combination
            if has_diabetes and has_hypertension and has_high_cholesterol:
                applicable["current_combination"] = "diabetes_hypertension_cholesterol"
            elif has_hypertension and has_high_cholesterol:
                applicable["current_combination"] = "hypertension_cholesterol"
            elif has_diabetes:
                applicable["current_combination"] = "diabetes"

        return applicable

    def get_exercise_order(self, health_profile):
        """
        Get the recommended exercise order based on health conditions.

        Parameters:
        -----------
        health_profile : Dict
            The health profile to evaluate

        Returns:
        --------
        List:
            Ordered list of exercise types
        """
        has_diabetes = health_profile.get('has_diabetes', False)
        has_hypertension = health_profile.get('has_hypertension', False)
        has_high_cholesterol = health_profile.get('has_high_cholesterol', False)

        # Default order
        exercise_order = ["Cardio", "Resistance", "Flexibility"]

        # Adjust based on conditions
        if has_diabetes and has_hypertension and has_high_cholesterol:
            # For all three conditions, balanced approach with cardio first
            exercise_order = ["Cardio", "Resistance", "Flexibility"]
        elif has_hypertension and has_high_cholesterol:
            # For hypertension + cholesterol, emphasize cardio
            exercise_order = ["Cardio", "Resistance", "Flexibility"]
        elif has_diabetes:
            # For diabetes, emphasize resistance then cardio
            exercise_order = ["Resistance", "Cardio", "Flexibility"]

        return exercise_order

    def get_monitoring_guidance(self, health_profile):
        """
        Get monitoring guidance for specific health conditions.

        Parameters:
        -----------
        health_profile : Dict
            The health profile to evaluate

        Returns:
        --------
        List:
            List of monitoring guidance statements
        """
        guidance = []

        if health_profile.get('has_diabetes', False):
            guidance.extend([
                "Monitor blood glucose before, during (for longer sessions), and after exercise",
                "Be prepared with fast-acting carbohydrates in case of hypoglycemia",
                "Watch for signs of hypoglycemia: shakiness, dizziness, confusion"
            ])

        if health_profile.get('has_hypertension', False):
            guidance.extend([
                "Monitor blood pressure response to exercise if possible",
                "Use perceived exertion (11-14 on 6-20 Borg scale) to gauge intensity",
                "Stop exercise if experiencing severe shortness of breath, chest pain, or dizziness"
            ])

        if health_profile.get('has_high_cholesterol', False):
            guidance.extend([
                "Focus on consistency of exercise for cholesterol improvement",
                "Combine with appropriate dietary changes for optimal results"
            ])

        return list(dict.fromkeys(guidance))  # Remove duplicates while preserving order

    def get_health_notes(self, health_profile):
        """
        Get health notes based on the health profile.

        Parameters:
        -----------
        health_profile : Dict
            The health profile to evaluate

        Returns:
        --------
        List:
            List of health notes
        """
        notes = []

        if health_profile.get('has_diabetes', False):
            notes.append("Timing: Exercise 1-3 hours after eating may minimize risk of hypoglycemia")

        if health_profile.get('has_hypertension', False):
            notes.append("Timing: Morning exercise may help control blood pressure throughout the day")
            notes.append("Focus on controlled breathing during exercise")
            notes.append("Avoid holding breath during resistance exercises (no Valsalva maneuver)")

        if health_profile.get('has_high_cholesterol', False):
            notes.append("Consistent aerobic exercise is key for cholesterol management")

        # Add multi-condition note if applicable
        if sum([health_profile.get('has_diabetes', False),
                health_profile.get('has_hypertension', False),
                health_profile.get('has_high_cholesterol', False)]) > 1:
            notes.append("This workout is optimized for multiple health conditions, balancing their different requirements")

        return list(dict.fromkeys(notes))  # Remove duplicates while preserving order

    def get_intensity_recommendations(self, health_profile, fitness_level):
        """
        Get exercise intensity recommendations for each exercise type based on health conditions.

        Parameters:
        -----------
        health_profile : Dict
            The health profile to evaluate
        fitness_level : str
            The user's fitness level

        Returns:
        --------
        Dict:
            Dictionary of intensity recommendations by exercise type
        """
        recommendations = {
            "aerobic": {
                "intensity_type": "moderate",  # Default based on baseline guidelines
                "intensity_range": {"min": 40, "max": 70},  # Default percentage range
                "intensity_unit": "VO2_reserve"
            },
            "resistance": {
                "intensity_type": "moderate",
                "intensity_range": {"min": 60, "max": 80},  # Percentage of 1RM
                "intensity_unit": "1RM",
                "sets": 1,
                "repetitions": {"min": 8, "max": 12}
            }
        }

        # Apply condition-specific recommendations
        if health_profile.get('has_diabetes', False):
            # Diabetes guidelines
            recommendations["aerobic"]["intensity_range"] = {"min": 50, "max": 70}
            recommendations["aerobic"]["intensity_unit"] = "max_heart_rate"
            recommendations["aerobic"]["intensity_note"] = "For diabetes, maintain 50-70% of maximum heart rate for moderate activity"

            recommendations["resistance"]["intensity_range"] = {"min": 60, "max": 80}
            recommendations["resistance"]["sets"] = {"min": 1, "max": 3}
            recommendations["resistance"]["repetitions"]["min"] = 8
            recommendations["resistance"]["repetitions"]["max"] = 15
            recommendations["resistance"]["intensity_note"] = "For diabetes, use 1-3 sets of 8-15 repetitions targeting major muscle groups"

        if health_profile.get('has_hypertension', False):
            # Hypertension guidelines - these take precedence for aerobic
            recommendations["aerobic"]["intensity_range"] = {"min": 40, "max": 70}
            recommendations["aerobic"]["intensity_unit"] = "VO2_reserve"
            recommendations["aerobic"]["intensity_note"] = "For hypertension, maintain moderate intensity (40-70% VO2 reserve)"

            recommendations["resistance"]["intensity_range"] = {"min": 60, "max": 80}
            recommendations["resistance"]["intensity_unit"] = "1RM"
            recommendations["resistance"]["sets"] = 1
            recommendations["resistance"]["repetitions"]["min"] = 10
            recommendations["resistance"]["repetitions"]["max"] = 15
            recommendations["resistance"]["exercises_count"] = {"min": 8, "max": 10}
            recommendations["resistance"]["intensity_note"] = "For hypertension, use 1 set of 10-15 repetitions at 60-80% 1RM"

        if health_profile.get('has_high_cholesterol', False):
            # High cholesterol guidelines
            if fitness_level == "beginner":
                # For beginners with high cholesterol
                recommendations["aerobic"]["intensity_range"] = {"min": 70, "max": 80}
                recommendations["aerobic"]["intensity_unit"] = "HR_reserve"
                recommendations["aerobic"]["intensity_note"] = "For cholesterol management, moderate-intensity at 70-80% heart rate reserve"

                recommendations["resistance"]["intensity_range"] = {"min": 50, "max": 60}
                recommendations["resistance"]["intensity_unit"] = "1RM"
                recommendations["resistance"]["intensity_note"] = "For beginners with high cholesterol, use low-intensity resistance at 50-60% 1RM"
            else:
                # For intermediate/advanced with high cholesterol
                recommendations["aerobic"]["intensity_range"] = {"min": 70, "max": 85}
                recommendations["aerobic"]["intensity_unit"] = "HR_max"
                recommendations["aerobic"]["intensity_note"] = "For cholesterol management, progress to 85% maximum heart rate"

                recommendations["resistance"]["intensity_range"] = {"min": 75, "max": 85}
                recommendations["resistance"]["intensity_unit"] = "1RM"
                recommendations["resistance"]["intensity_note"] = "For cholesterol management, use moderate to high-intensity resistance at 75-85% 1RM"

        return recommendations

    def get_exercise_modifications(self, exercise_type, health_profile):
        """
        Get condition-specific exercise modifications based on the exercise type and health conditions.

        Parameters:
        -----------
        exercise_type : str
            The type of exercise ('Cardio', 'Resistance', or 'Flexibility')
        health_profile : Dict
            The health profile containing condition information

        Returns:
        --------
        Dict:
            Dictionary of modifications to apply to the exercise
        """
        modifications = {}

        # Map exercise types to normalized types
        normalized_type = exercise_type.lower()
        if normalized_type == 'cardio':
            normalized_type = 'aerobic'

        # Get applicable condition-specific modifications
        if health_profile.get('has_diabetes', False):
            # Diabetes modifications
            if normalized_type == 'resistance':
                modifications['health_priority'] = 'high'
                modifications['health_benefit'] = 'Improves insulin sensitivity and glycemic control'

            elif normalized_type == 'aerobic':
                # No specific modifications to aerobic exercise structure for diabetes
                # beyond intensity recommendations which are handled elsewhere
                pass

        if health_profile.get('has_hypertension', False):
            # Hypertension modifications
            if normalized_type == 'resistance':
                modifications['special_instructions'] = "Maintain normal breathing, avoid holding breath"
                modifications['safety_note'] = "Avoid Valsalva maneuver (holding breath during exertion)"

            elif normalized_type == 'aerobic':
                modifications['health_priority'] = 'high'
                modifications['health_benefit'] = 'Helps reduce blood pressure'

        if health_profile.get('has_high_cholesterol', False):
            # High cholesterol modifications
            if normalized_type == 'aerobic':
                modifications['health_priority'] = 'high'
                modifications['health_benefit'] = 'Helps improve cholesterol levels'
                modifications['duration_modifier'] = 1.2  # Extend cardio duration by 20%
                modifications['duration_cap'] = {'min': 45, 'max': 60}  # Cap at 45-60 mins

        return modifications

    def get_guideline_requirements(self, health_profile, days_per_week):
        """
        Get specific weekly exercise requirements based on guidelines.

        Parameters:
        -----------
        health_profile : Dict
            The health profile to evaluate
        days_per_week : int
            Number of available workout days per week

        Returns:
        --------
        Dict:
            Dictionary of exercise requirements by type
        """
        requirements = {
            'aerobic': {
                'weekly_minutes': 150,  # Default from baseline
                'sessions_per_week': min(days_per_week, 5),  # Default from guidelines (most days)
                'intensity': {}
            },
            'resistance': {
                'sessions_per_week': min(2, days_per_week),  # Default from baseline (at least 2)
                'intensity': {}
            },
            'flexibility': {
                'sessions_per_week': min(days_per_week, 3),  # Include in most sessions
            }
        }

        # Apply condition-specific modifications
        has_diabetes = health_profile.get('has_diabetes', False)
        has_hypertension = health_profile.get('has_hypertension', False)
        has_high_cholesterol = health_profile.get('has_high_cholesterol', False)

        # Singapore guidelines base requirement - 150-300 minutes moderate-intensity aerobic
        baseline = self.guidelines["baseline"].get("singapore_pa", {})
        if baseline:
            aerobic_recs = baseline.get("recommendations", {}).get("aerobic", {})
            moderate_intensity = aerobic_recs.get("moderate_intensity", {})
            requirements['aerobic']['weekly_minutes'] = moderate_intensity.get("min_minutes", 150)

            # Resistance training - at least 2 days per week
            resistance_recs = baseline.get("recommendations", {}).get("resistance", {})
            resistance_days = resistance_recs.get("frequency", {}).get("days_per_week", 2)
            requirements['resistance']['sessions_per_week'] = min(resistance_days, days_per_week)

        # Cholesterol guidelines specifics
        if has_high_cholesterol:
            cholesterol_guidelines = self.guidelines["conditions"].get("cholesterol", {})
            if cholesterol_guidelines:
                # Elevated cholesterol typically recommends 30+ minutes, 5 days per week
                patient_recs = cholesterol_guidelines.get("patient_groups", {}).get("elevated_cholesterol", {})
                if patient_recs:
                    pa_recs = patient_recs.get("recommendations", {}).get("physical_activity", {})
                    if pa_recs:
                        cholesterol_minutes = pa_recs.get("duration", 30) * pa_recs.get("frequency", 5)
                        requirements['aerobic']['weekly_minutes'] = max(
                            requirements['aerobic']['weekly_minutes'],
                            cholesterol_minutes
                        )
                        requirements['aerobic']['sessions_per_week'] = min(
                            pa_recs.get("frequency", 5),
                            days_per_week
                        )

        # Hypertension guidelines specifics
        if has_hypertension:
            hypertension_guidelines = self.guidelines["conditions"].get("hypertension", {})
            if hypertension_guidelines:
                hypertension_recs = hypertension_guidelines.get("recommendations", {})

                # Hypertension typically recommends most days of the week
                aerobic_recs = hypertension_recs.get("aerobic", {})
                if aerobic_recs:
                    hypertension_days = aerobic_recs.get("frequency", {}).get("days_per_week", 5)
                    requirements['aerobic']['sessions_per_week'] = min(
                        max(requirements['aerobic']['sessions_per_week'], hypertension_days),
                        days_per_week
                    )

                    # Calculate minutes based on duration recommendation
                    if 'duration' in aerobic_recs:
                        duration_min = aerobic_recs.get("duration", {}).get("range", {}).get("min", 30)
                        hypertension_minutes = duration_min * requirements['aerobic']['sessions_per_week']
                        requirements['aerobic']['weekly_minutes'] = max(
                            requirements['aerobic']['weekly_minutes'],
                            hypertension_minutes
                        )

        # Diabetes guidelines specifics
        if has_diabetes:
            diabetes_guidelines = self.guidelines["conditions"].get("diabetes", {})
            if diabetes_guidelines:
                diabetes_recs = diabetes_guidelines.get("recommendations", {})

                # Diabetes emphasizes resistance training and aerobic
                resistance_recs = diabetes_recs.get("resistance", {})
                if resistance_recs:
                    diabetes_resistance_days = resistance_recs.get("frequency", {}).get("days_per_week", 2)
                    requirements['resistance']['sessions_per_week'] = min(
                        max(requirements['resistance']['sessions_per_week'], diabetes_resistance_days),
                        days_per_week
                    )

                # Aerobic requirements for diabetes
                aerobic_recs = diabetes_recs.get("aerobic", {})
                if aerobic_recs:
                    diabetes_weekly = aerobic_recs.get("intensity", {}).get("moderate", {}).get("duration", 150)
                    requirements['aerobic']['weekly_minutes'] = max(
                        requirements['aerobic']['weekly_minutes'],
                        diabetes_weekly
                    )

        # Calculate per-session minutes based on frequency
        if requirements['aerobic']['sessions_per_week'] > 0:
            minutes_per_session = requirements['aerobic']['weekly_minutes'] / requirements['aerobic']['sessions_per_week']
            requirements['aerobic']['minutes_per_session'] = minutes_per_session

        return requirements

    def get_session_requirements(self, health_profile, days_per_week):
        """
        Get session-type requirements based on health conditions and available days.

        Parameters:
        -----------
        health_profile : Dict
            The health profile to evaluate
        days_per_week : int
            Number of available workout days per week

        Returns:
        --------
        Dict:
            Dictionary specifying session types and their requirements
        """
        # Get basic guideline requirements
        guideline_reqs = self.get_guideline_requirements(health_profile, days_per_week)

        # Extract condition information
        has_diabetes = health_profile.get('has_diabetes', False)
        has_hypertension = health_profile.get('has_hypertension', False)
        has_high_cholesterol = health_profile.get('has_high_cholesterol', False)

        # Calculate required sessions
        aerobic_sessions = guideline_reqs['aerobic']['sessions_per_week']
        resistance_sessions = guideline_reqs['resistance']['sessions_per_week']

        # Determine session types needed
        session_requirements = {
            'total_sessions': days_per_week,
            'session_types': {},
            'weekly_schedule': []
        }

        # Logic for session type allocation
        if days_per_week <= 2:
            # For very limited days, use combined sessions
            session_requirements['session_types']['combined'] = days_per_week

        elif has_diabetes and has_hypertension and has_high_cholesterol:
            # For all three conditions, use a balanced approach
            if days_per_week >= 4:
                # With 4+ days, we can have some specialized sessions
                session_requirements['session_types']['resistance'] = 2
                session_requirements['session_types']['aerobic'] = 2
                session_requirements['session_types']['combined'] = days_per_week - 4
            else:
                # With 3 days, use all combined
                session_requirements['session_types']['combined'] = days_per_week

        elif has_diabetes:
            # For diabetes, emphasize resistance training
            if days_per_week >= 4:
                session_requirements['session_types']['resistance'] = 2
                session_requirements['session_types']['aerobic'] = 1
                session_requirements['session_types']['combined'] = days_per_week - 3
            else:
                # With limited days, ensure resistance is included
                session_requirements['session_types']['resistance'] = min(2, days_per_week)
                session_requirements['session_types']['combined'] = days_per_week - session_requirements['session_types']['resistance']

        elif has_hypertension or has_high_cholesterol:
            # For hypertension/cholesterol, emphasize aerobic
            if days_per_week >= 4:
                session_requirements['session_types']['aerobic'] = 2
                session_requirements['session_types']['resistance'] = 1
                session_requirements['session_types']['combined'] = days_per_week - 3
            else:
                # With limited days, ensure aerobic is emphasized
                session_requirements['session_types']['aerobic'] = min(2, days_per_week)
                session_requirements['session_types']['combined'] = days_per_week - session_requirements['session_types']['aerobic']

        else:
            # For general fitness, balance aerobic and resistance
            if days_per_week >= 4:
                session_requirements['session_types']['aerobic'] = 2
                session_requirements['session_types']['resistance'] = 2
                session_requirements['session_types']['combined'] = days_per_week - 4
            else:
                # With 3 days, mix of specific and combined
                session_requirements['session_types']['aerobic'] = 1
                session_requirements['session_types']['resistance'] = 1
                session_requirements['session_types']['combined'] = days_per_week - 2

        # Sanity check: ensure we don't specify more sessions than days
        total_specified = sum(session_requirements['session_types'].values())
        if total_specified > days_per_week:
            # Prioritize aerobic and resistance, reduce combined
            if 'combined' in session_requirements['session_types']:
                session_requirements['session_types']['combined'] = max(0, days_per_week - (
                    session_requirements['session_types'].get('aerobic', 0) +
                    session_requirements['session_types'].get('resistance', 0)
                ))

        # Create weekly schedule template
        schedule = []

        # First, add resistance sessions (not on consecutive days if possible)
        resistance_count = session_requirements['session_types'].get('resistance', 0)
        for i in range(resistance_count):
            if i == 0:
                # First resistance day
                day_idx = 0
            else:
                # Space out resistance days when possible
                day_idx = min(i * 2, days_per_week - 1)

            # Check if this day is already used
            while day_idx < days_per_week and any(s['day_index'] == day_idx for s in schedule):
                day_idx += 1

            if day_idx < days_per_week:
                schedule.append({
                    'day_index': day_idx,
                    'type': 'resistance',
                    'focus': 'Strength Training'
                })

        # Next, add aerobic sessions
        aerobic_count = session_requirements['session_types'].get('aerobic', 0)
        for i in range(aerobic_count):
            # Find next available day
            for day_idx in range(days_per_week):
                if not any(s['day_index'] == day_idx for s in schedule):
                    schedule.append({
                        'day_index': day_idx,
                        'type': 'aerobic',
                        'focus': 'Cardio Training'
                    })
                    break

        # Finally, add combined sessions to remaining days
        combined_count = session_requirements['session_types'].get('combined', 0)
        for i in range(combined_count):
            # Find next available day
            for day_idx in range(days_per_week):
                if not any(s['day_index'] == day_idx for s in schedule):
                    schedule.append({
                        'day_index': day_idx,
                        'type': 'combined',
                        'focus': 'Combined Training'
                    })
                    break

        # Sort the schedule by day index
        schedule.sort(key=lambda x: x['day_index'])

        # Add schedule to requirements
        session_requirements['weekly_schedule'] = schedule

        return session_requirements

    def explain_condition_guidelines(self, condition):
        """
        Provide explanation of guidelines for a specific health condition

        Parameters:
        -----------
        condition: str
            Health condition to explain (diabetes, hypertension, cholesterol)

        Returns:
        --------
        Dict:
            Guideline explanations for the condition
        """
        condition_map = {
            "diabetes": "diabetes",
            "hypertension": "hypertension",
            "high blood pressure": "hypertension",
            "blood pressure": "hypertension",
            "cholesterol": "cholesterol",
            "high cholesterol": "cholesterol"
        }

        normalized_condition = condition_map.get(condition.lower(), None)
        if not normalized_condition or normalized_condition not in self.guidelines["conditions"]:
            return {"error": f"No guidelines found for {condition}"}

        return self.guidelines["conditions"][normalized_condition]

    def get_effectiveness_rating(self, condition, exercise_type):
        """
        Get the effectiveness rating for an exercise type for a condition

        Parameters:
        -----------
        condition: str
            Health condition (diabetes, hypertension, cholesterol)
        exercise_type: str
            Type of exercise (aerobic, resistance, combined)

        Returns:
        --------
        Dict:
            Rating and explanation
        """
        # Map conditions to effectiveness parameters
        condition_param_map = {
            "diabetes": "glycemic_control",
            "hypertension": "blood_pressure",
            "cholesterol": "lipid_profile",
            "obesity": "bodyweight_loss"
        }

        param = condition_param_map.get(condition.lower(), None)
        if not param:
            return {"rating": "unknown", "explanation": f"No effectiveness data for {condition}"}

        effectiveness = self.guidelines["baseline"].get("modality_effectiveness", {})
        parameters = effectiveness.get("parameters", {})

        if param in parameters:
            # Get ratings for each exercise type
            ratings = parameters[param]
            benefit_scale = effectiveness.get("benefit_scale", {})

            normalized_type = exercise_type.lower()
            if normalized_type == "cardio":
                normalized_type = "aerobic"

            if normalized_type in ratings:
                rating = ratings[normalized_type]
                explanation = benefit_scale.get(rating, "Unknown benefit level")

                return {
                    "rating": rating,
                    "explanation": explanation,
                    "comparative": self._get_comparative_effectiveness(param, normalized_type)
                }

        return {"rating": "unknown", "explanation": "No effectiveness data available"}

    def _get_comparative_effectiveness(self, parameter, exercise_type):
        """Generate comparative effectiveness statement against other exercise types"""
        effectiveness = self.guidelines["baseline"].get("modality_effectiveness", {})
        parameters = effectiveness.get("parameters", {})

        if parameter not in parameters:
            return "No comparative data available"

        ratings = parameters[parameter]
        all_types = ["aerobic", "resistance", "combined"]
        other_types = [t for t in all_types if t != exercise_type]

        current_rating = ratings.get(exercise_type, "0")

        comparisons = []
        for other in other_types:
            other_rating = ratings.get(other, "0")

            if self._rating_value(current_rating) > self._rating_value(other_rating):
                comparisons.append(f"more effective than {other} training")
            elif self._rating_value(current_rating) < self._rating_value(other_rating):
                comparisons.append(f"less effective than {other} training")
            else:
                comparisons.append(f"similarly effective as {other} training")

        return f"This exercise type is {', '.join(comparisons)}"

    def _rating_value(self, rating):
        """Convert rating symbol to numeric value"""
        rating_map = {
            "0": 0,
            "+": 1,
            "++": 2,
            "+++": 3
        }
        return rating_map.get(rating, 0)

    def get_condition_specific_exercises(self, condition, exercise_type=None):
        """
        Get recommended exercises for a specific health condition

        Parameters:
        -----------
        condition: str
            Health condition (diabetes, hypertension, cholesterol)
        exercise_type: str, optional
            Type of exercise to filter by (cardio/aerobic, resistance)

        Returns:
        --------
        Dict:
            Recommended exercises and guidelines
        """
        # Normalize condition name
        condition_map = {
            "diabetes": "diabetes",
            "hypertension": "hypertension",
            "high blood pressure": "hypertension",
            "blood pressure": "hypertension",
            "cholesterol": "cholesterol",
            "high cholesterol": "cholesterol"
        }

        normalized_condition = condition_map.get(condition.lower())
        if not normalized_condition:
            return {"error": f"Unknown condition: {condition}"}

        # Get condition guidelines
        condition_guidelines = self.guidelines["conditions"].get(normalized_condition, {})
        if not condition_guidelines:
            return {"error": f"No guidelines found for {condition}"}

        # Normalize exercise type if provided
        normalized_type = None
        if exercise_type:
            type_map = {
                "cardio": "aerobic",
                "aerobic": "aerobic",
                "resistance": "resistance",
                "strength": "resistance"
            }
            normalized_type = type_map.get(exercise_type.lower())

        # Extract relevant recommendations
        recommendations = condition_guidelines.get("recommendations", {})

        response = {
            "condition": normalized_condition,
            "source": condition_guidelines.get("source", "Clinical guidelines"),
            "description": condition_guidelines.get("description", ""),
            "exercise_recommendations": {}
        }

        # Filter by exercise type if specified
        if normalized_type and normalized_type in recommendations:
            response["exercise_recommendations"][normalized_type] = recommendations[normalized_type]
        elif not normalized_type:
            # Include all exercise types
            for ex_type in ["aerobic", "resistance", "flexibility_balance"]:
                if ex_type in recommendations:
                    response["exercise_recommendations"][ex_type] = recommendations[ex_type]

        # Add effectiveness rating
        if normalized_type:
            effectiveness = self.get_effectiveness_rating(normalized_condition, normalized_type)
            if effectiveness:
                response["effectiveness"] = effectiveness

        return response

# Example of usage (can be uncommented for testing)
if __name__ == "__main__":
    # Initialize the guidelines registry
    guidelines = GuidelinesRegistry()

    # Test with a diabetes profile
    diabetes_profile = {'has_diabetes': True}
    diabetes_guidelines = guidelines.get_applicable_guidelines(diabetes_profile)
    print("Guidelines for diabetes retrieved:", bool(diabetes_guidelines))

    # Test getting exercise order
    exercise_order = guidelines.get_exercise_order(diabetes_profile)
    print(f"Exercise order for diabetes: {', '.join(exercise_order)}")

    # Test getting monitoring guidance
    monitoring = guidelines.get_monitoring_guidance(diabetes_profile)
    print(f"Retrieved {len(monitoring)} monitoring guidelines")

    # Test getting effectiveness rating
    effectiveness = guidelines.get_effectiveness_rating("diabetes", "resistance")
    print(f"Effectiveness of resistance training for diabetes: {effectiveness['rating']}")
    print(f"Explanation: {effectiveness['explanation']}")
    if 'comparative' in effectiveness:
        print(f"Comparative: {effectiveness['comparative']}")

"""# Feature: Plan Generator Class"""

class GuidelineBasedExercisePlanGenerator:
    """
    Exercise plan generator that implements clinical guidelines for health conditions,
    focusing on meeting specific guideline requirements and leveraging exercise embeddings
    for intelligent exercise selection and substitution.
    """

    def __init__(self, exercises_data, user_profile, guidelines_registry, embedding_system=None):
        """
        Initialize the guideline-based exercise plan generator.
        """
        self.exercises_data = exercises_data
        self.user_profile = user_profile
        self.guidelines_registry = guidelines_registry

        # Extract key profile information
        self.fitness_level = user_profile.get('fitness_info', {}).get('fitness_level', 'intermediate')
        self.fitness_goal = user_profile.get('fitness_info', {}).get('fitness_goal', 'general')
        self.days_per_week = user_profile.get('preferences', {}).get('sessions_per_week', 3)

        # Prepare health profile
        self.health_profile = {
            'has_diabetes': user_profile.get('health_conditions', {}).get('has_diabetes', False),
            'has_hypertension': user_profile.get('health_conditions', {}).get('has_hypertension', False),
            'has_high_cholesterol': user_profile.get('health_conditions', {}).get('has_high_cholesterol', False),
            'has_obesity': user_profile.get('health_conditions', {}).get('has_obesity', False)
        }

        # Get applicable guidelines and session requirements
        self.applicable_guidelines = self.guidelines_registry.get_applicable_guidelines(self.health_profile)
        self.requirements = self.guidelines_registry.get_guideline_requirements(
            self.health_profile,
            self.days_per_week
        )
        self.session_requirements = self.guidelines_registry.get_session_requirements(
            self.health_profile,
            self.days_per_week
        )

    def _select_exercises(self, muscle_groups, exercise_type, count=3):
        """
        Select exercises for specific muscle groups and exercise type,
        prioritizing based on health conditions.

        Parameters:
        -----------
        muscle_groups : list
            List of muscle groups to target
        exercise_type : str
            Type of exercise (Resistance, Cardio, Flexibility)
        count : int, optional
            Number of exercises to select

        Returns:
        --------
        list:
            Selected exercises
        """
        # Filter exercises by type
        type_exercises = self.exercises_data[
            self.exercises_data['Exercise_Type'] == exercise_type
        ]

        selected_exercises = []
        used_exercise_names = set()

        # Determine condition-specific scoring modifiers
        condition_modifiers = {}
        if self.health_profile.get('has_diabetes', False):
            condition_modifiers['diabetes'] = True
            # For diabetes, prioritize resistance training, especially for large muscle groups
            if exercise_type == 'Resistance':
                # Prioritize legs and large muscle groups for insulin sensitivity
                condition_modifiers['prioritize_muscles'] = ['Legs', 'Back', 'Chest']

        if self.health_profile.get('has_hypertension', False):
            condition_modifiers['hypertension'] = True
            # For hypertension, prioritize cardio and low-intensity resistance
            if exercise_type == 'Cardio':
                condition_modifiers['cardio_intensity'] = 'moderate'  # Prefer moderate intensity cardio
            elif exercise_type == 'Resistance':
                condition_modifiers['resistance_intensity'] = 'low'  # Prefer low intensity resistance

        if self.health_profile.get('has_high_cholesterol', False):
            condition_modifiers['cholesterol'] = True
            # For cholesterol, prioritize cardio and full-body movements
            if exercise_type == 'Cardio':
                condition_modifiers['cardio_intensity'] = 'moderate_to_vigorous'  # Prefer vigorous cardio


        # If we haven't selected enough exercises or don't have embedding system, use rule-based approach
        if len(selected_exercises) < count:
            # Get additional exercises from dataset
            for muscle in muscle_groups:
                if len(selected_exercises) >= count:
                    break

                # Find exercises for this muscle
                muscle_exercises = type_exercises[
                    type_exercises['Main_muscle'] == muscle
                ]

                # Filter out already used exercises
                muscle_exercises = muscle_exercises[
                    ~muscle_exercises['Exercise_Name'].isin(used_exercise_names)
                ]

                if len(muscle_exercises) == 0:
                    continue

                # Score exercises based on condition modifiers
                def score_exercise(exercise):
                    score = 0

                    # Apply condition-specific scoring
                    if 'diabetes' in condition_modifiers:
                        if exercise_type == 'Resistance':
                            score += 2  # Prioritize resistance for diabetes

                            # Extra points for prioritized muscles
                            if 'prioritize_muscles' in condition_modifiers:
                                if exercise['Main_muscle'] in condition_modifiers['prioritize_muscles']:
                                    score += 3

                    if 'hypertension' in condition_modifiers:
                        if exercise_type == 'Cardio':
                            score += 3  # Prioritize cardio for hypertension

                            # Moderate intensity preferred for hypertension
                            if 'cardio_intensity' in condition_modifiers:
                                if condition_modifiers['cardio_intensity'] == 'moderate':
                                    # Add logic to determine intensity
                                    if 'low impact' in str(exercise['Exercise_Name']).lower() or 'moderate' in str(exercise['Exercise_Name']).lower():
                                        score += 2

                    if 'cholesterol' in condition_modifiers:
                        if exercise_type == 'Cardio':
                            score += 3  # Prioritize cardio for cholesterol

                    return score

                # If we have multiple exercises, select based on scoring
                if len(muscle_exercises) > 1:
                    muscle_exercises['score'] = muscle_exercises.apply(score_exercise, axis=1)
                    muscle_exercises = muscle_exercises.sort_values('score', ascending=False)

                # Select top exercises
                for i in range(min(count - len(selected_exercises), len(muscle_exercises))):
                    exercise = muscle_exercises.iloc[i]

                    # Create detailed exercise entry
                    health_benefit = ""
                    if 'diabetes' in condition_modifiers and exercise_type == 'Resistance':
                        health_benefit = "Helps improve insulin sensitivity"
                    elif 'hypertension' in condition_modifiers and exercise_type == 'Cardio':
                        health_benefit = "Helps reduce blood pressure"
                    elif 'cholesterol' in condition_modifiers and exercise_type == 'Cardio':
                        health_benefit = "Helps improve cholesterol levels"

                    selected_exercise = {
                        "name": exercise['Exercise_Name'],
                        "main_muscle": exercise['Main_muscle'],
                        "target_muscles": exercise.get('Target_Muscles', ''),
                        "equipment": exercise.get('Equipment', 'Bodyweight'),
                        "exercise_type": exercise_type,
                        "health_benefit": health_benefit
                    }

                    selected_exercises.append(selected_exercise)
                    used_exercise_names.add(exercise['Exercise_Name'])

        return selected_exercises

    def _create_workout_session(self, session_info, day_name):
        """
        Create a comprehensive workout session based on health guidelines.

        Parameters:
        -----------
        session_info : dict
            Session information (type, focus)
        day_name : str
            Name of the day for this session

        Returns:
        --------
        dict:
            Comprehensive workout session
        """
        # Get exercise order from guidelines
        exercise_order = self.guidelines_registry.get_exercise_order(self.health_profile)

        # Determine muscle groups for balanced workout
        muscle_groups = ['Chest', 'Back', 'Legs', 'Shoulders', 'Arms', 'Core']

        # Get intensity recommendations
        intensity_recs = self.guidelines_registry.get_intensity_recommendations(
            self.health_profile,
            self.fitness_level
        )

        # Initialize session structure
        session = {
            "name": f"{session_info['focus']} - {day_name}",
            "day": day_name,
            "session_type": session_info['type'],
            "exercises": [],
            "stretches": [],
            "rationale": [],
            "estimated_duration": 45
        }

        # Add session-specific rationale based on guidelines
        if session_info['type'] == 'resistance':
            if self.health_profile.get('has_diabetes', False):
                session['rationale'].append(
                    "Resistance training is crucial for managing diabetes by improving insulin sensitivity "
                    "and glycemic control. Focus on large muscle groups for maximum metabolic impact."
                )
            elif self.health_profile.get('has_hypertension', False):
                session['rationale'].append(
                    "Resistance training supports overall cardiovascular health when performed with proper "
                    "breathing techniques. Avoid holding breath during exertion (Valsalva maneuver)."
                )
            else:
                session['rationale'].append(
                    "Resistance training builds muscle strength and improves metabolic health."
                )
        elif session_info['type'] == 'aerobic':
            if self.health_profile.get('has_high_cholesterol', False):
                session['rationale'].append(
                    "Consistent aerobic exercise is essential for improving cholesterol levels. "
                    "Aim for moderate-to-high intensity to maximize lipid profile benefits."
                )
            elif self.health_profile.get('has_hypertension', False):
                session['rationale'].append(
                    "Regular aerobic exercise helps reduce blood pressure by improving cardiovascular "
                    "function. Morning exercise may help control blood pressure throughout the day."
                )
            else:
                session['rationale'].append(
                    "Aerobic exercise improves cardiovascular health and endurance."
                )
        elif session_info['type'] == 'combined':
            session['rationale'].append(
                "Combined training provides comprehensive health benefits by integrating both "
                "cardiovascular and resistance exercises, making it efficient for multiple health conditions."
            )

        # Adjust muscle groups based on session type for more focused workouts
        if session_info['type'] == 'resistance':
            # For resistance: focus on different muscle groups each day
            if 'Monday' in day_name or 'Thursday' in day_name:
                muscle_groups = ['Chest', 'Shoulders', 'Triceps']  # Push muscles
            elif 'Tuesday' in day_name or 'Friday' in day_name:
                muscle_groups = ['Back', 'Biceps']  # Pull muscles
            else:
                muscle_groups = ['Legs', 'Core']  # Legs and core

        elif session_info['type'] == 'aerobic':
            # For cardio: primarily cardio exercises
            muscle_groups = ['Legs', 'Core']  # Main muscles for cardio

        elif session_info['type'] == 'combined':
            # For combined: include a variety but fewer per group
            pass  # Use all muscle groups but with fewer exercises per group

        # Select exercises based on exercise order and session type
        exercise_counts = {
            'Resistance': 4 if session_info['type'] == 'resistance' else 2,
            'Cardio': 2 if session_info['type'] in ['aerobic', 'combined'] else 1,
            'Flexibility': 2 if session_info['type'] in ['resistance', 'combined'] else 3
        }

        for ex_type in exercise_order:
            # Adjust exercise selection based on session type
            if session_info['type'] == 'resistance' and ex_type == 'Cardio':
                # For resistance sessions, include minimal cardio as warm-up
                exercise_counts['Cardio'] = 1
            elif session_info['type'] == 'aerobic' and ex_type == 'Resistance':
                # For aerobic sessions, include minimal resistance
                exercise_counts['Resistance'] = 1

            # Skip if current type doesn't belong in this session
            if session_info['type'] == 'resistance' and ex_type == 'Cardio' and len(session['exercises']) > 0:
                continue
            elif session_info['type'] == 'aerobic' and ex_type == 'Resistance':
                continue

            # Select exercises
            selected_exercises = self._select_exercises(
                muscle_groups,
                ex_type,
                count=exercise_counts.get(ex_type, 2)
            )

            # Add exercise-specific details based on guidelines
            for exercise in selected_exercises:
                # Get specific modifications for this exercise type
                modifications = self.guidelines_registry.get_exercise_modifications(
                    ex_type,
                    self.health_profile
                )

                # Add exercise-specific parameters
                if ex_type == 'Resistance':
                    # Use resistance training guidelines
                    res_params = intensity_recs.get('resistance', {})

                    # Get sets and reps ranges
                    if isinstance(res_params.get('sets', 3), dict):
                        sets_range = f"{res_params.get('sets', {}).get('min', 1)}-{res_params.get('sets', {}).get('max', 3)}"
                    else:
                        sets_range = str(res_params.get('sets', 3))

                    exercise.update({
                        "sets": sets_range,
                        "reps": f"{res_params.get('repetitions', {}).get('min', 8)}-{res_params.get('repetitions', {}).get('max', 12)}",
                        "rest_period": "60-90 seconds",
                        "intensity_note": res_params.get('intensity_note', '')
                    })

                elif ex_type == 'Cardio':
                    # Use cardio guidelines
                    cardio_params = intensity_recs.get('aerobic', {})

                    # Duration based on session type
                    if session_info['type'] == 'aerobic':
                        duration_min = 20
                        duration_max = 30
                    else:
                        duration_min = 10
                        duration_max = 15

                    # Apply duration modifier from modifications if applicable
                    if 'duration_modifier' in modifications:
                        duration_min = int(duration_min * modifications['duration_modifier'])
                        duration_max = int(duration_max * modifications['duration_modifier'])

                    # Apply duration cap if specified
                    if 'duration_cap' in modifications:
                        duration_min = min(duration_min, modifications['duration_cap'].get('min', 60))
                        duration_max = min(duration_max, modifications['duration_cap'].get('max', 60))

                    exercise.update({
                        "duration": {
                            "min": duration_min,
                            "max": duration_max,
                            "unit": "minutes"
                        },
                        "intensity_note": cardio_params.get('intensity_note', 'Moderate intensity')
                    })

                elif ex_type == 'Flexibility':
                    exercise.update({
                        "duration": {
                            "min": 30,
                            "max": 45,
                            "unit": "seconds"
                        },
                        "repetitions": 2,
                        "notes": "Perform each stretch twice, holding for 30-45 seconds"
                    })

                # Apply any condition-specific modifications
                for key, value in modifications.items():
                    if key not in exercise:  # Don't overwrite existing properties
                        exercise[key] = value

                # Add to session exercises
                session['exercises'].append(exercise)

        # Add health notes and monitoring guidance
        session['health_notes'] = self.guidelines_registry.get_health_notes(self.health_profile)
        session['monitoring_guidance'] = self.guidelines_registry.get_monitoring_guidance(self.health_profile)

        # Estimate session duration based on exercises
        total_minutes = 0
        for exercise in session['exercises']:
            if exercise['exercise_type'] == 'Cardio':
                # For cardio, use the average of min/max duration
                if isinstance(exercise.get('duration', {}), dict):
                    total_minutes += (exercise['duration'].get('min', 10) + exercise['duration'].get('max', 15)) / 2
                else:
                    total_minutes += 15  # Default duration
            elif exercise['exercise_type'] == 'Resistance':
                # For resistance, calculate based on sets * reps * rest time
                sets = 3  # Default sets
                if isinstance(exercise.get('sets', 3), str) and '-' in exercise['sets']:
                    sets_range = exercise['sets'].split('-')
                    sets = (int(sets_range[0]) + int(sets_range[1])) / 2
                elif isinstance(exercise.get('sets', 3), dict):
                    sets = (exercise['sets'].get('min', 1) + exercise['sets'].get('max', 3)) / 2
                elif isinstance(exercise.get('sets', 3), (int, float)):
                    sets = exercise['sets']

                # Estimate ~1.5 min per set including rest
                total_minutes += sets * 1.5

            elif exercise['exercise_type'] == 'Flexibility':
                # For flexibility, use the average stretch duration * repetitions
                if isinstance(exercise.get('duration', {}), dict):
                    stretch_duration = (exercise['duration'].get('min', 30) + exercise['duration'].get('max', 45)) / 2
                else:
                    stretch_duration = 30  # Default

                repetitions = exercise.get('repetitions', 2)
                total_minutes += (stretch_duration / 60) * repetitions  # Convert seconds to minutes

        # Add 5 min for warm-up and 5 min for cool-down
        total_minutes += 10

        # Update session duration (round to nearest 5 minutes)
        session['estimated_duration'] = round(total_minutes / 5) * 5

        return session

    def generate_plan(self):
        """
        Generate a complete workout plan based on clinical guidelines.

        Returns:
        --------
        dict:
            Complete workout plan with sessions and health guidance
        """
        # Get the weekly schedule from session requirements
        weekly_schedule = self.session_requirements.get('weekly_schedule', [])

        # Available days (converted from index to names)
        all_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        workout_days = [all_days[s['day_index']] for s in weekly_schedule]

        # Create workout sessions
        workout_sessions = []
        for schedule_entry, day_name in zip(weekly_schedule, workout_days):
            session = self._create_workout_session(
                {
                    'type': schedule_entry['type'],
                    'focus': schedule_entry['focus']
                },
                day_name
            )
            workout_sessions.append(session)

        # Compile the complete workout plan
        workout_plan = {
            "user_id": self.user_profile.get('user_id', 'anonymous'),
            "plan_type": "health_based",
            "fitness_level": self.fitness_level,
            "fitness_goal": self.fitness_goal,
            "health_conditions": {
                "diabetes": self.health_profile.get('has_diabetes', False),
                "hypertension": self.health_profile.get('has_hypertension', False),
                "high_cholesterol": self.health_profile.get('has_high_cholesterol', False),
                "obesity": self.health_profile.get('has_obesity', False)
            },
            "recommended_weekly_minutes": self.requirements['aerobic']['weekly_minutes'],
            "resistance_sessions_per_week": self.requirements['resistance']['sessions_per_week'],
            "sessions_per_week": self.days_per_week,
            "workout_sessions": workout_sessions,
            "global_health_notes": self.guidelines_registry.get_health_notes(self.health_profile),
            "global_monitoring_guidance": self.guidelines_registry.get_monitoring_guidance(self.health_profile)
        }

        return workout_plan

    # Function to print a formatted summary of a workout plan
    def print_plan_summary(plan):
        """
        Print a formatted summary of the health-based exercise plan

        Parameters:
        -----------
        plan : dict
            The exercise plan to summarize
        """
        print("\n📋 Health-Based Exercise Plan Summary:")
        print(f"• Fitness level: {plan['fitness_level'].capitalize()}")
        print(f"• Fitness goal: {plan.get('fitness_goal', 'General').capitalize()}")

        # Print health conditions
        health_conditions = []
        if plan['health_conditions'].get('diabetes', False):
            health_conditions.append('Diabetes')
        if plan['health_conditions'].get('hypertension', False):
            health_conditions.append('Hypertension')
        if plan['health_conditions'].get('high_cholesterol', False):
            health_conditions.append('High Cholesterol')
        if plan['health_conditions'].get('obesity', False):
            health_conditions.append('Obesity')

        if health_conditions:
            print(f"• Health conditions: {', '.join(health_conditions)}")

        print(f"• Total sessions: {len(plan['workout_sessions'])}")
        print(f"• Recommended weekly minutes: {plan['recommended_weekly_minutes']}")
        print(f"• Resistance sessions per week: {plan.get('resistance_sessions_per_week', 2)}")

        # Print global health guidance if present
        if 'global_health_notes' in plan and plan['global_health_notes']:
            print("\n🩺 Health Notes:")
            for note in plan['global_health_notes']:
                print(f"  - {note}")

        if 'global_monitoring_guidance' in plan and plan['global_monitoring_guidance']:
            print("\n📊 Monitoring Guidance:")
            for guidance in plan['global_monitoring_guidance']:
                print(f"  - {guidance}")

        print("\n📅 Workout Schedule:")
        for i, session in enumerate(plan['workout_sessions']):
            print(f"\n🏋️ Workout {i+1}: {session['name']} ({session.get('estimated_duration', 45)} min)")

            # Print session rationale if present
            if 'rationale' in session and session['rationale']:
                print("\n  Rationale:")
                for rationale in session['rationale']:
                    print(f"  • {rationale}")

            # Print session-specific health notes if present
            if 'health_notes' in session and session['health_notes']:
                print("\n  Health notes:")
                for note in session['health_notes']:
                    print(f"  • {note}")

            print("\n  Exercises:")
            for j, exercise in enumerate(session['exercises']):
                ex_type = exercise['exercise_type']
                name_str = f"{j+1}. {exercise['name']} ({ex_type})"

                if ex_type == 'Cardio':
                    if isinstance(exercise['duration'], dict):
                        duration = f"{exercise['duration']['min']}-{exercise['duration']['max']} {exercise['duration'].get('unit', 'minutes')}"
                    else:
                        duration = f"{exercise['duration']} minutes"
                    print(f"  {name_str} - {duration}")

                    # Print intensity note if present
                    if 'intensity_note' in exercise:
                        print(f"     Note: {exercise['intensity_note']}")

                elif ex_type == 'Resistance':
                    sets_reps = f"{exercise.get('sets', 3)} sets of {exercise.get('reps', '10-12')} reps"
                    print(f"  {name_str} - {sets_reps}")

                    # Print rest period if present
                    if 'rest_period' in exercise:
                        print(f"     Rest: {exercise['rest_period']}")

                else:  # Flexibility
                    if isinstance(exercise['duration'], dict):
                        duration = f"{exercise['duration']['min']}-{exercise['duration']['max']} {exercise['duration'].get('unit', 'seconds')}"
                    else:
                        duration = f"{exercise['duration']} seconds"
                    print(f"  {name_str} - {duration}")

                # Print health benefit if present
                if 'health_benefit' in exercise:
                    print(f"     🩺 {exercise['health_benefit']}")

                # Print equipment if present
                if 'equipment' in exercise and exercise['equipment'] != 'Bodyweight':
                    print(f"     Equipment: {exercise['equipment']}")

    def get_plan_summary(plan):

            # get user info 
            
            """
            Generate a formatted summary of the health-based exercise plan as a string.

            Parameters:
            -----------
            plan : dict
                The exercise plan to summarize.

            Returns:
            --------
            str:
                A formatted string containing the exercise plan summary.
            """
            summary = ""

            # Add the header
            summary += "\n📋 Health-Based Exercise Plan Summary:\n"
            summary += f"• Fitness level: {plan['fitness_level'].capitalize()}\n"
            summary += f"• Fitness goal: {plan.get('fitness_goal', 'General').capitalize()}\n"

            # Add health conditions
            health_conditions = []
            if plan['health_conditions'].get('diabetes', False):
                health_conditions.append('Diabetes')
            if plan['health_conditions'].get('hypertension', False):
                health_conditions.append('Hypertension')
            if plan['health_conditions'].get('high_cholesterol', False):
                health_conditions.append('High Cholesterol')
            if plan['health_conditions'].get('obesity', False):
                health_conditions.append('Obesity')

            if health_conditions:
                summary += f"• Health conditions: {', '.join(health_conditions)}\n"

            # Add general plan details
            summary += f"• Total sessions: {len(plan['workout_sessions'])}\n"
            summary += f"• Recommended weekly minutes: {plan['recommended_weekly_minutes']}\n"
            summary += f"• Resistance sessions per week: {plan.get('resistance_sessions_per_week', 2)}\n"

            # Add global health notes
            if 'global_health_notes' in plan and plan['global_health_notes']:
                summary += "\n🩺 Health Notes:\n"
                for note in plan['global_health_notes']:
                    summary += f"  - {note}\n"

            # Add global monitoring guidance
            if 'global_monitoring_guidance' in plan and plan['global_monitoring_guidance']:
                summary += "\n📊 Monitoring Guidance:\n"
                for guidance in plan['global_monitoring_guidance']:
                    summary += f"  - {guidance}\n"

            # Add workout schedule
            summary += "\n📅 Workout Schedule:\n"
            for i, session in enumerate(plan['workout_sessions']):
                summary += f"\n🏋️ Workout {i+1}: {session['name']} ({session.get('estimated_duration', 45)} min)\n"

                # Add session rationale
                if 'rationale' in session and session['rationale']:
                    summary += "  Rationale:\n"
                    for rationale in session['rationale']:
                        summary += f"  • {rationale}\n"

                # Add session-specific health notes
                if 'health_notes' in session and session['health_notes']:
                    summary += "  Health notes:\n"
                    for note in session['health_notes']:
                        summary += f"  • {note}\n"

                # Add exercises
                summary += "  Exercises:\n"
                for j, exercise in enumerate(session['exercises']):
                    ex_type = exercise['exercise_type']
                    name_str = f"{j+1}. {exercise['name']} ({ex_type})"

                    if ex_type == 'Cardio':
                        if isinstance(exercise['duration'], dict):
                            duration = f"{exercise['duration']['min']}-{exercise['duration']['max']} {exercise['duration'].get('unit', 'minutes')}"
                        else:
                            duration = f"{exercise['duration']} minutes"
                        summary += f"  {name_str} - {duration}\n"

                        # Add intensity note if present
                        if 'intensity_note' in exercise:
                            summary += f"     Note: {exercise['intensity_note']}\n"

                    elif ex_type == 'Resistance':
                        sets_reps = f"{exercise.get('sets', 3)} sets of {exercise.get('reps', '10-12')} reps"
                        summary += f"  {name_str} - {sets_reps}\n"

                        # Add rest period if present
                        if 'rest_period' in exercise:
                            summary += f"     Rest: {exercise['rest_period']}\n"

                    else:  # Flexibility
                        if isinstance(exercise['duration'], dict):
                            duration = f"{exercise['duration']['min']}-{exercise['duration']['max']} {exercise['duration'].get('unit', 'seconds')}"
                        else:
                            duration = f"{exercise['duration']} seconds"
                        summary += f"  {name_str} - {duration}\n"

                    # Add health benefit if present
                    if 'health_benefit' in exercise:
                        summary += f"     🩺 {exercise['health_benefit']}\n"

                    # Add equipment if present
                    if 'equipment' in exercise and exercise['equipment'] != 'Bodyweight':
                        summary += f"     Equipment: {exercise['equipment']}\n"

            return summary


def generate_exercise_plan(user_profile: dict, exercise_dataset_path: str) -> dict:
    """
    Generate an exercise plan based on the provided user profile and exercise dataset.

    Parameters:
    -----------
    user_profile : dict
        The user's profile containing demographics, health metrics, fitness info, and preferences.
    exercise_dataset_path : str
        Path to the CSV file containing exercise data.

    Returns:
    --------
    dict:
        The generated exercise plan.
    """
    sample_user_profile = SAMPLE_USER_PROFILE

    # Instantiate GuidelinesRegistry
    guidelines_registry = GuidelinesRegistry()

    # Load exercise data
    exercises_data = pd.read_csv(exercise_dataset_path)

    # Initialize the plan generator
    generator = GuidelineBasedExercisePlanGenerator(
        exercises_data=exercises_data,
        user_profile=sample_user_profile,
        guidelines_registry=guidelines_registry,
    )

    # Generate the plan
    plan = generator.generate_plan()

    return plan


def print_exercise_plan_summary(plan: dict):
    """
    Print a formatted summary of the exercise plan.

    Parameters:
    -----------
    plan : dict
        The exercise plan to summarize.
    """
    GuidelineBasedExercisePlanGenerator.print_plan_summary(plan)

def get_exercise_plan_summary(plan: dict):
    """
    Print a formatted summary of the exercise plan.

    Parameters:
    -----------
    plan : dict
        The exercise plan to summarize.
    """
    # Print the summary
    plan_summary = GuidelineBasedExercisePlanGenerator.get_plan_summary (plan)
    return plan_summary

# Assuming SAMPLE_USER_PROFILE from ipython-input-6-661abb05d396 is the intended user profile
user_profile = SAMPLE_USER_PROFILE

# Instantiate GuidelinesRegistry (assuming it's defined elsewhere)
guidelines_registry = GuidelinesRegistry()
exercises_data = pd.read_csv(csv_path)
generator = GuidelineBasedExercisePlanGenerator(
    exercises_data=exercises_data,
    user_profile=SAMPLE_USER_PROFILE,
    guidelines_registry=guidelines_registry,
)

# Assuming there's a method to generate the plan
plan = generator.generate_plan()
GuidelineBasedExercisePlanGenerator.print_plan_summary(plan) # Use the print_plan_summary method to display a formatted version

